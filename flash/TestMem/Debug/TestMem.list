
TestMem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001900  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001a94  08001a94  00011a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ad4  08001ad4  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ad4  08001ad4  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ad4  08001ad4  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ad4  08001ad4  00011ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ad8  08001ad8  00011ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08001adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000003c  08001b18  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08001b18  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006faf  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015a0  00000000  00000000  0002701b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000668  00000000  00000000  000285c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005b0  00000000  00000000  00028c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021012  00000000  00000000  000291d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005f35  00000000  00000000  0004a1ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9940  00000000  00000000  0005011f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00119a5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017b4  00000000  00000000  00119adc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000003c 	.word	0x2000003c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001a7c 	.word	0x08001a7c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000040 	.word	0x20000040
 80001d0:	08001a7c 	.word	0x08001a7c

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f9fa 	bl	80005d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f814 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f864 	bl	80002ac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Flash_Write_Data(ADDRESS_DATA_STORAGE, data, sizeof(data));
 80001e4:	2210      	movs	r2, #16
 80001e6:	4905      	ldr	r1, [pc, #20]	; (80001fc <main+0x28>)
 80001e8:	4805      	ldr	r0, [pc, #20]	; (8000200 <main+0x2c>)
 80001ea:	f000 f955 	bl	8000498 <Flash_Write_Data>
  Flash_Read_Data(ADDRESS_DATA_STORAGE, buffer, 16);
 80001ee:	2210      	movs	r2, #16
 80001f0:	4904      	ldr	r1, [pc, #16]	; (8000204 <main+0x30>)
 80001f2:	4803      	ldr	r0, [pc, #12]	; (8000200 <main+0x2c>)
 80001f4:	f000 f9c4 	bl	8000580 <Flash_Read_Data>
//  vr_read = Flash_Read_NUM(ADDRESS_DATA_STORAGE_FLOAT);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f8:	e7fe      	b.n	80001f8 <main+0x24>
 80001fa:	bf00      	nop
 80001fc:	20000000 	.word	0x20000000
 8000200:	08019000 	.word	0x08019000
 8000204:	2000006c 	.word	0x2000006c

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b096      	sub	sp, #88	; 0x58
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0314 	add.w	r3, r7, #20
 8000212:	2244      	movs	r2, #68	; 0x44
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fc28 	bl	8001a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	463b      	mov	r3, r7
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800022a:	2310      	movs	r3, #16
 800022c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000232:	2300      	movs	r3, #0
 8000234:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000236:	2360      	movs	r3, #96	; 0x60
 8000238:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800023e:	2301      	movs	r3, #1
 8000240:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000242:	2301      	movs	r3, #1
 8000244:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000246:	2328      	movs	r3, #40	; 0x28
 8000248:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800024a:	2307      	movs	r3, #7
 800024c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800024e:	2302      	movs	r3, #2
 8000250:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000252:	2302      	movs	r3, #2
 8000254:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0314 	add.w	r3, r7, #20
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fdf6 	bl	8000e4c <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000266:	f000 f839 	bl	80002dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2303      	movs	r3, #3
 8000270:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800027e:	463b      	mov	r3, r7
 8000280:	2104      	movs	r1, #4
 8000282:	4618      	mov	r0, r3
 8000284:	f001 fa02 	bl	800168c <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800028e:	f000 f825 	bl	80002dc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000292:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000296:	f000 fd83 	bl	8000da0 <HAL_PWREx_ControlVoltageScaling>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002a0:	f000 f81c 	bl	80002dc <Error_Handler>
  }
}
 80002a4:	bf00      	nop
 80002a6:	3758      	adds	r7, #88	; 0x58
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b2:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <MX_GPIO_Init+0x2c>)
 80002b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b6:	4a08      	ldr	r2, [pc, #32]	; (80002d8 <MX_GPIO_Init+0x2c>)
 80002b8:	f043 0301 	orr.w	r3, r3, #1
 80002bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <MX_GPIO_Init+0x2c>)
 80002c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]

}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40021000 	.word	0x40021000

080002dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
	...

080002ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <HAL_MspInit+0x44>)
 80002f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002f6:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <HAL_MspInit+0x44>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6613      	str	r3, [r2, #96]	; 0x60
 80002fe:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <HAL_MspInit+0x44>)
 8000300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030a:	4b09      	ldr	r3, [pc, #36]	; (8000330 <HAL_MspInit+0x44>)
 800030c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800030e:	4a08      	ldr	r2, [pc, #32]	; (8000330 <HAL_MspInit+0x44>)
 8000310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000314:	6593      	str	r3, [r2, #88]	; 0x58
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_MspInit+0x44>)
 8000318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800031a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800031e:	603b      	str	r3, [r7, #0]
 8000320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40021000 	.word	0x40021000

08000334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr

08000342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000346:	e7fe      	b.n	8000346 <HardFault_Handler+0x4>

08000348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800034c:	e7fe      	b.n	800034c <MemManage_Handler+0x4>

0800034e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000352:	e7fe      	b.n	8000352 <BusFault_Handler+0x4>

08000354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000358:	e7fe      	b.n	8000358 <UsageFault_Handler+0x4>

0800035a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr

08000376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800037a:	bf00      	nop
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000388:	f000 f976 	bl	8000678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}

08000390 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000394:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <SystemInit+0x64>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800039a:	4a16      	ldr	r2, [pc, #88]	; (80003f4 <SystemInit+0x64>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <SystemInit+0x68>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <SystemInit+0x68>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x68>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <SystemInit+0x68>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a0f      	ldr	r2, [pc, #60]	; (80003f8 <SystemInit+0x68>)
 80003bc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80003c0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80003c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <SystemInit+0x68>)
 80003c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <SystemInit+0x68>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a09      	ldr	r2, [pc, #36]	; (80003f8 <SystemInit+0x68>)
 80003d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80003da:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <SystemInit+0x68>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003e0:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <SystemInit+0x64>)
 80003e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003e6:	609a      	str	r2, [r3, #8]
#endif
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	e000ed00 	.word	0xe000ed00
 80003f8:	40021000 	.word	0x40021000

080003fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000434 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000400:	f7ff ffc6 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000404:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000406:	e003      	b.n	8000410 <LoopCopyDataInit>

08000408 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000408:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800040a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800040c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800040e:	3104      	adds	r1, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000410:	480a      	ldr	r0, [pc, #40]	; (800043c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000414:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000416:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000418:	d3f6      	bcc.n	8000408 <CopyDataInit>
	ldr	r2, =_sbss
 800041a:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <LoopForever+0x12>)
	b	LoopFillZerobss
 800041c:	e002      	b.n	8000424 <LoopFillZerobss>

0800041e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800041e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000420:	f842 3b04 	str.w	r3, [r2], #4

08000424 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000424:	4b08      	ldr	r3, [pc, #32]	; (8000448 <LoopForever+0x16>)
	cmp	r2, r3
 8000426:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000428:	d3f9      	bcc.n	800041e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800042a:	f001 fafb 	bl	8001a24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800042e:	f7ff fed1 	bl	80001d4 <main>

08000432 <LoopForever>:

LoopForever:
    b LoopForever
 8000432:	e7fe      	b.n	8000432 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000434:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8000438:	08001adc 	.word	0x08001adc
	ldr	r0, =_sdata
 800043c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000440:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 8000444:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 8000448:	200000d8 	.word	0x200000d8

0800044c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800044c:	e7fe      	b.n	800044c <ADC1_IRQHandler>

0800044e <GetPage>:

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */

// quanDH
static uint32_t GetPage(uint32_t Address)
{
 800044e:	b480      	push	{r7}
 8000450:	b085      	sub	sp, #20
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<256; indx++)
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	e012      	b.n	8000482 <GetPage+0x34>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8000462:	02db      	lsls	r3, r3, #11
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	429a      	cmp	r2, r3
 8000468:	d208      	bcs.n	800047c <GetPage+0x2e>
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000470:	02db      	lsls	r3, r3, #11
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	429a      	cmp	r2, r3
 8000476:	d301      	bcc.n	800047c <GetPage+0x2e>
	  {
		  return indx;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	e006      	b.n	800048a <GetPage+0x3c>
  for (int indx=0; indx<256; indx++)
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3301      	adds	r3, #1
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	2bff      	cmp	r3, #255	; 0xff
 8000486:	dde9      	ble.n	800045c <GetPage+0xe>
	  }
  }

  return 0;
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint8_t *Data, uint32_t data_length)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b08f      	sub	sp, #60	; 0x3c
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	uint8_t	*temp_data_address;
	uint16_t i=0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	867b      	strh	r3, [r7, #50]	; 0x32
	uint64_t writeval=0, writetime=0;
 80004a8:	f04f 0300 	mov.w	r3, #0
 80004ac:	f04f 0400 	mov.w	r4, #0
 80004b0:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80004b4:	f04f 0300 	mov.w	r3, #0
 80004b8:	f04f 0400 	mov.w	r4, #0
 80004bc:	e9c7 3406 	strd	r3, r4, [r7, #24]
	uint32_t	temp_write_address;

	temp_data_address = Data;
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	637b      	str	r3, [r7, #52]	; 0x34
	temp_write_address = StartPageAddress;
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	62fb      	str	r3, [r7, #44]	; 0x2c

	  /* Unlock the Flash to enable the flash control register access *************/
	if(data_length%8 == 0){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f003 0307 	and.w	r3, r3, #7
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d14e      	bne.n	8000570 <Flash_Write_Data+0xd8>

		//Calculate number of word to write
		writetime = data_length/8;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	08db      	lsrs	r3, r3, #3
 80004d6:	f04f 0400 	mov.w	r4, #0
 80004da:	e9c7 3406 	strd	r3, r4, [r7, #24]
	   HAL_FLASH_Unlock();
 80004de:	f000 fa3d 	bl	800095c <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/
	   uint32_t Page = GetPage(StartPageAddress);
 80004e2:	68f8      	ldr	r0, [r7, #12]
 80004e4:	f7ff ffb3 	bl	800044e <GetPage>
 80004e8:	6178      	str	r0, [r7, #20]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80004ea:	4b24      	ldr	r3, [pc, #144]	; (800057c <Flash_Write_Data+0xe4>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.Page 	   = Page;
 80004f0:	4a22      	ldr	r2, [pc, #136]	; (800057c <Flash_Write_Data+0xe4>)
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = 1;
 80004f6:	4b21      	ldr	r3, [pc, #132]	; (800057c <Flash_Write_Data+0xe4>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	60da      	str	r2, [r3, #12]
	   EraseInitStruct.Banks	   = 1;
 80004fc:	4b1f      	ldr	r3, [pc, #124]	; (800057c <Flash_Write_Data+0xe4>)
 80004fe:	2201      	movs	r2, #1
 8000500:	605a      	str	r2, [r3, #4]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	4619      	mov	r1, r3
 8000508:	481c      	ldr	r0, [pc, #112]	; (800057c <Flash_Write_Data+0xe4>)
 800050a:	f000 fb15 	bl	8000b38 <HAL_FLASHEx_Erase>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d003      	beq.n	800051c <Flash_Write_Data+0x84>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8000514:	f000 fa54 	bl	80009c0 <HAL_FLASH_GetError>
 8000518:	4603      	mov	r3, r0
 800051a:	e02a      	b.n	8000572 <Flash_Write_Data+0xda>
	   }
	   for (i = 0;i<writetime;i++)
 800051c:	2300      	movs	r3, #0
 800051e:	867b      	strh	r3, [r7, #50]	; 0x32
 8000520:	e01b      	b.n	800055a <Flash_Write_Data+0xc2>
		{
			writeval = *(__IO uint64_t*)(temp_data_address);
 8000522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000524:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000528:	e9c7 3408 	strd	r3, r4, [r7, #32]
		   /* Program the user Flash area word by word*/
			 if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, temp_write_address, writeval) == HAL_OK)
 800052c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000530:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f9a6 	bl	8000884 <HAL_FLASH_Program>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d106      	bne.n	800054c <Flash_Write_Data+0xb4>
			 {
				 temp_write_address += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 800053e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000540:	3308      	adds	r3, #8
 8000542:	62fb      	str	r3, [r7, #44]	; 0x2c
				 temp_data_address += 8;
 8000544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000546:	3308      	adds	r3, #8
 8000548:	637b      	str	r3, [r7, #52]	; 0x34
 800054a:	e003      	b.n	8000554 <Flash_Write_Data+0xbc>
			 }
			 else
			 {
			   /* Error occurred while writing data in Flash memory*/
				 return HAL_FLASH_GetError ();
 800054c:	f000 fa38 	bl	80009c0 <HAL_FLASH_GetError>
 8000550:	4603      	mov	r3, r0
 8000552:	e00e      	b.n	8000572 <Flash_Write_Data+0xda>
	   for (i = 0;i<writetime;i++)
 8000554:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000556:	3301      	adds	r3, #1
 8000558:	867b      	strh	r3, [r7, #50]	; 0x32
 800055a:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800055c:	f04f 0200 	mov.w	r2, #0
 8000560:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000564:	42a2      	cmp	r2, r4
 8000566:	bf08      	it	eq
 8000568:	4299      	cmpeq	r1, r3
 800056a:	d3da      	bcc.n	8000522 <Flash_Write_Data+0x8a>
			 }

		}
	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 800056c:	f000 fa18 	bl	80009a0 <HAL_FLASH_Lock>
	   }
	   return 0;
 8000570:	2300      	movs	r3, #0
}
 8000572:	4618      	mov	r0, r3
 8000574:	373c      	adds	r7, #60	; 0x3c
 8000576:	46bd      	mov	sp, r7
 8000578:	bd90      	pop	{r4, r7, pc}
 800057a:	bf00      	nop
 800057c:	20000058 	.word	0x20000058

08000580 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint8_t *destination, uint16_t length_inByte)
{
 8000580:	b480      	push	{r7}
 8000582:	b089      	sub	sp, #36	; 0x24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	4613      	mov	r3, r2
 800058c:	80fb      	strh	r3, [r7, #6]
		uint16_t i=0;
 800058e:	2300      	movs	r3, #0
 8000590:	83fb      	strh	r3, [r7, #30]
		uint32_t temp_address;
		uint8_t *temp_destination;

		temp_address = StartPageAddress;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	61bb      	str	r3, [r7, #24]
		temp_destination = destination;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	617b      	str	r3, [r7, #20]

		for (i=0;i<length_inByte;i++)
 800059a:	2300      	movs	r3, #0
 800059c:	83fb      	strh	r3, [r7, #30]
 800059e:	e00d      	b.n	80005bc <Flash_Read_Data+0x3c>
		{
			*temp_destination = *(__IO uint8_t*)temp_address;
 80005a0:	69bb      	ldr	r3, [r7, #24]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	701a      	strb	r2, [r3, #0]
			temp_destination++;
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	3301      	adds	r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
			temp_address++;
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	3301      	adds	r3, #1
 80005b4:	61bb      	str	r3, [r7, #24]
		for (i=0;i<length_inByte;i++)
 80005b6:	8bfb      	ldrh	r3, [r7, #30]
 80005b8:	3301      	adds	r3, #1
 80005ba:	83fb      	strh	r3, [r7, #30]
 80005bc:	8bfa      	ldrh	r2, [r7, #30]
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d3ed      	bcc.n	80005a0 <Flash_Read_Data+0x20>
		}
}
 80005c4:	bf00      	nop
 80005c6:	3724      	adds	r7, #36	; 0x24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005d6:	2300      	movs	r3, #0
 80005d8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005da:	2003      	movs	r0, #3
 80005dc:	f000 f91e 	bl	800081c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 f80d 	bl	8000600 <HAL_InitTick>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d002      	beq.n	80005f2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005ec:	2301      	movs	r3, #1
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	e001      	b.n	80005f6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005f2:	f7ff fe7b 	bl	80002ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005f6:	79fb      	ldrb	r3, [r7, #7]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <HAL_InitTick+0x6c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d023      	beq.n	800065c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <HAL_InitTick+0x70>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <HAL_InitTick+0x6c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	fbb3 f3f1 	udiv	r3, r3, r1
 8000626:	fbb2 f3f3 	udiv	r3, r2, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f91d 	bl	800086a <HAL_SYSTICK_Config>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d10f      	bne.n	8000656 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b0f      	cmp	r3, #15
 800063a:	d809      	bhi.n	8000650 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800063c:	2200      	movs	r2, #0
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	f04f 30ff 	mov.w	r0, #4294967295
 8000644:	f000 f8f5 	bl	8000832 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000648:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <HAL_InitTick+0x74>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6013      	str	r3, [r2, #0]
 800064e:	e007      	b.n	8000660 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000650:	2301      	movs	r3, #1
 8000652:	73fb      	strb	r3, [r7, #15]
 8000654:	e004      	b.n	8000660 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000656:	2301      	movs	r3, #1
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	e001      	b.n	8000660 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800065c:	2301      	movs	r3, #1
 800065e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000660:	7bfb      	ldrb	r3, [r7, #15]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000018 	.word	0x20000018
 8000670:	20000010 	.word	0x20000010
 8000674:	20000014 	.word	0x20000014

08000678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_IncTick+0x20>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_IncTick+0x24>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <HAL_IncTick+0x24>)
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000018 	.word	0x20000018
 800069c:	200000d4 	.word	0x200000d4

080006a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <HAL_GetTick+0x14>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	200000d4 	.word	0x200000d4

080006b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ea:	4a04      	ldr	r2, [pc, #16]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	60d3      	str	r3, [r2, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <__NVIC_GetPriorityGrouping+0x18>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 0307 	and.w	r3, r3, #7
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db0a      	blt.n	8000746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	490c      	ldr	r1, [pc, #48]	; (8000768 <__NVIC_SetPriority+0x4c>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	0112      	lsls	r2, r2, #4
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	440b      	add	r3, r1
 8000740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000744:	e00a      	b.n	800075c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4908      	ldr	r1, [pc, #32]	; (800076c <__NVIC_SetPriority+0x50>)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 030f 	and.w	r3, r3, #15
 8000752:	3b04      	subs	r3, #4
 8000754:	0112      	lsls	r2, r2, #4
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	440b      	add	r3, r1
 800075a:	761a      	strb	r2, [r3, #24]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	e000e100 	.word	0xe000e100
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f1c3 0307 	rsb	r3, r3, #7
 800078a:	2b04      	cmp	r3, #4
 800078c:	bf28      	it	cs
 800078e:	2304      	movcs	r3, #4
 8000790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3304      	adds	r3, #4
 8000796:	2b06      	cmp	r3, #6
 8000798:	d902      	bls.n	80007a0 <NVIC_EncodePriority+0x30>
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3b03      	subs	r3, #3
 800079e:	e000      	b.n	80007a2 <NVIC_EncodePriority+0x32>
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	f04f 32ff 	mov.w	r2, #4294967295
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	43da      	mvns	r2, r3
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	401a      	ands	r2, r3
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	43d9      	mvns	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	4313      	orrs	r3, r2
         );
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3724      	adds	r7, #36	; 0x24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e8:	d301      	bcc.n	80007ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ea:	2301      	movs	r3, #1
 80007ec:	e00f      	b.n	800080e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <SysTick_Config+0x40>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f6:	210f      	movs	r1, #15
 80007f8:	f04f 30ff 	mov.w	r0, #4294967295
 80007fc:	f7ff ff8e 	bl	800071c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <SysTick_Config+0x40>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000806:	4b04      	ldr	r3, [pc, #16]	; (8000818 <SysTick_Config+0x40>)
 8000808:	2207      	movs	r2, #7
 800080a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	e000e010 	.word	0xe000e010

0800081c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ff47 	bl	80006b8 <__NVIC_SetPriorityGrouping>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b086      	sub	sp, #24
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	60b9      	str	r1, [r7, #8]
 800083c:	607a      	str	r2, [r7, #4]
 800083e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000844:	f7ff ff5c 	bl	8000700 <__NVIC_GetPriorityGrouping>
 8000848:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	6978      	ldr	r0, [r7, #20]
 8000850:	f7ff ff8e 	bl	8000770 <NVIC_EncodePriority>
 8000854:	4602      	mov	r2, r0
 8000856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff5d 	bl	800071c <__NVIC_SetPriority>
}
 8000862:	bf00      	nop
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ffb0 	bl	80007d8 <SysTick_Config>
 8000878:	4603      	mov	r3, r0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000896:	4b2f      	ldr	r3, [pc, #188]	; (8000954 <HAL_FLASH_Program+0xd0>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d101      	bne.n	80008a2 <HAL_FLASH_Program+0x1e>
 800089e:	2302      	movs	r3, #2
 80008a0:	e053      	b.n	800094a <HAL_FLASH_Program+0xc6>
 80008a2:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <HAL_FLASH_Program+0xd0>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80008a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80008ac:	f000 f894 	bl	80009d8 <FLASH_WaitForLastOperation>
 80008b0:	4603      	mov	r3, r0
 80008b2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80008b4:	7dfb      	ldrb	r3, [r7, #23]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d143      	bne.n	8000942 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80008ba:	4b26      	ldr	r3, [pc, #152]	; (8000954 <HAL_FLASH_Program+0xd0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80008c0:	4b25      	ldr	r3, [pc, #148]	; (8000958 <HAL_FLASH_Program+0xd4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d009      	beq.n	80008e0 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80008cc:	4b22      	ldr	r3, [pc, #136]	; (8000958 <HAL_FLASH_Program+0xd4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a21      	ldr	r2, [pc, #132]	; (8000958 <HAL_FLASH_Program+0xd4>)
 80008d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80008d6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <HAL_FLASH_Program+0xd0>)
 80008da:	2202      	movs	r2, #2
 80008dc:	771a      	strb	r2, [r3, #28]
 80008de:	e002      	b.n	80008e6 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <HAL_FLASH_Program+0xd0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d107      	bne.n	80008fc <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80008ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008f0:	68b8      	ldr	r0, [r7, #8]
 80008f2:	f000 f8c9 	bl	8000a88 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80008f6:	2301      	movs	r3, #1
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	e010      	b.n	800091e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d002      	beq.n	8000908 <HAL_FLASH_Program+0x84>
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d10a      	bne.n	800091e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	4619      	mov	r1, r3
 800090c:	68b8      	ldr	r0, [r7, #8]
 800090e:	f000 f8df 	bl	8000ad0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2b02      	cmp	r3, #2
 8000916:	d102      	bne.n	800091e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8000918:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800091c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800091e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000922:	f000 f859 	bl	80009d8 <FLASH_WaitForLastOperation>
 8000926:	4603      	mov	r3, r0
 8000928:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d006      	beq.n	800093e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_FLASH_Program+0xd4>)
 8000932:	695a      	ldr	r2, [r3, #20]
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	43db      	mvns	r3, r3
 8000938:	4907      	ldr	r1, [pc, #28]	; (8000958 <HAL_FLASH_Program+0xd4>)
 800093a:	4013      	ands	r3, r2
 800093c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800093e:	f000 f9dd 	bl	8000cfc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <HAL_FLASH_Program+0xd0>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]

  return status;
 8000948:	7dfb      	ldrb	r3, [r7, #23]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000001c 	.word	0x2000001c
 8000958:	40022000 	.word	0x40022000

0800095c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000962:	2300      	movs	r3, #0
 8000964:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <HAL_FLASH_Unlock+0x38>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	2b00      	cmp	r3, #0
 800096c:	da0b      	bge.n	8000986 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_FLASH_Unlock+0x38>)
 8000970:	4a09      	ldr	r2, [pc, #36]	; (8000998 <HAL_FLASH_Unlock+0x3c>)
 8000972:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <HAL_FLASH_Unlock+0x38>)
 8000976:	4a09      	ldr	r2, [pc, #36]	; (800099c <HAL_FLASH_Unlock+0x40>)
 8000978:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_FLASH_Unlock+0x38>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	2b00      	cmp	r3, #0
 8000980:	da01      	bge.n	8000986 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000986:	79fb      	ldrb	r3, [r7, #7]
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	40022000 	.word	0x40022000
 8000998:	45670123 	.word	0x45670123
 800099c:	cdef89ab 	.word	0xcdef89ab

080009a0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_FLASH_Lock+0x1c>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <HAL_FLASH_Lock+0x1c>)
 80009aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ae:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	40022000 	.word	0x40022000

080009c0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <HAL_FLASH_GetError+0x14>)
 80009c6:	685b      	ldr	r3, [r3, #4]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	2000001c 	.word	0x2000001c

080009d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80009e0:	f7ff fe5e 	bl	80006a0 <HAL_GetTick>
 80009e4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80009e6:	e00d      	b.n	8000a04 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ee:	d009      	beq.n	8000a04 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80009f0:	f7ff fe56 	bl	80006a0 <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d801      	bhi.n	8000a04 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8000a00:	2303      	movs	r3, #3
 8000a02:	e036      	b.n	8000a72 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <FLASH_WaitForLastOperation+0xa4>)
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1eb      	bne.n	80009e8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <FLASH_WaitForLastOperation+0xa4>)
 8000a12:	691a      	ldr	r2, [r3, #16]
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <FLASH_WaitForLastOperation+0xa8>)
 8000a16:	4013      	ands	r3, r2
 8000a18:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d01e      	beq.n	8000a5e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <FLASH_WaitForLastOperation+0xac>)
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <FLASH_WaitForLastOperation+0xac>)
 8000a2a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d007      	beq.n	8000a46 <FLASH_WaitForLastOperation+0x6e>
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <FLASH_WaitForLastOperation+0xa4>)
 8000a38:	699a      	ldr	r2, [r3, #24]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000a40:	490e      	ldr	r1, [pc, #56]	; (8000a7c <FLASH_WaitForLastOperation+0xa4>)
 8000a42:	4313      	orrs	r3, r2
 8000a44:	618b      	str	r3, [r1, #24]
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d004      	beq.n	8000a5a <FLASH_WaitForLastOperation+0x82>
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <FLASH_WaitForLastOperation+0xa4>)
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000a58:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e009      	b.n	8000a72 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <FLASH_WaitForLastOperation+0xa4>)
 8000a60:	691b      	ldr	r3, [r3, #16]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d002      	beq.n	8000a70 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <FLASH_WaitForLastOperation+0xa4>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40022000 	.word	0x40022000
 8000a80:	0002c3fa 	.word	0x0002c3fa
 8000a84:	2000001c 	.word	0x2000001c

08000a88 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000a88:	b490      	push	{r4, r7}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000a94:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <FLASH_Program_DoubleWord+0x44>)
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	4a0c      	ldr	r2, [pc, #48]	; (8000acc <FLASH_Program_DoubleWord+0x44>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	683a      	ldr	r2, [r7, #0]
 8000aa4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000aa6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8000aaa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000aae:	f04f 0300 	mov.w	r3, #0
 8000ab2:	f04f 0400 	mov.w	r4, #0
 8000ab6:	0013      	movs	r3, r2
 8000ab8:	2400      	movs	r4, #0
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	3204      	adds	r2, #4
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc90      	pop	{r4, r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40022000 	.word	0x40022000

08000ad0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8000ada:	2340      	movs	r3, #64	; 0x40
 8000adc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <FLASH_Program_Fast+0x64>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <FLASH_Program_Fast+0x64>)
 8000aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000af0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000af2:	f3ef 8310 	mrs	r3, PRIMASK
 8000af6:	60fb      	str	r3, [r7, #12]
  return(result);
 8000af8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8000afa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	3304      	adds	r3, #4
 8000b10:	617b      	str	r3, [r7, #20]
    row_index--;
 8000b12:	7ffb      	ldrb	r3, [r7, #31]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8000b18:	7ffb      	ldrb	r3, [r7, #31]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1ef      	bne.n	8000afe <FLASH_Program_Fast+0x2e>
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	f383 8810 	msr	PRIMASK, r3

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8000b28:	bf00      	nop
 8000b2a:	3724      	adds	r7, #36	; 0x24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	40022000 	.word	0x40022000

08000b38 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b42:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <HAL_FLASHEx_Erase+0x138>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d101      	bne.n	8000b4e <HAL_FLASHEx_Erase+0x16>
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	e08b      	b.n	8000c66 <HAL_FLASHEx_Erase+0x12e>
 8000b4e:	4b48      	ldr	r3, [pc, #288]	; (8000c70 <HAL_FLASHEx_Erase+0x138>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b58:	f7ff ff3e 	bl	80009d8 <FLASH_WaitForLastOperation>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d17b      	bne.n	8000c5e <HAL_FLASHEx_Erase+0x126>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b66:	4b42      	ldr	r3, [pc, #264]	; (8000c70 <HAL_FLASHEx_Erase+0x138>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8000b6c:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <HAL_FLASHEx_Erase+0x13c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d019      	beq.n	8000bac <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000b78:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <HAL_FLASHEx_Erase+0x13c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a3d      	ldr	r2, [pc, #244]	; (8000c74 <HAL_FLASHEx_Erase+0x13c>)
 8000b7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b82:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000b84:	4b3b      	ldr	r3, [pc, #236]	; (8000c74 <HAL_FLASHEx_Erase+0x13c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d009      	beq.n	8000ba4 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8000b90:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <HAL_FLASHEx_Erase+0x13c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a37      	ldr	r2, [pc, #220]	; (8000c74 <HAL_FLASHEx_Erase+0x13c>)
 8000b96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b9a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8000b9c:	4b34      	ldr	r3, [pc, #208]	; (8000c70 <HAL_FLASHEx_Erase+0x138>)
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	771a      	strb	r2, [r3, #28]
 8000ba2:	e016      	b.n	8000bd2 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8000ba4:	4b32      	ldr	r3, [pc, #200]	; (8000c70 <HAL_FLASHEx_Erase+0x138>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	771a      	strb	r2, [r3, #28]
 8000baa:	e012      	b.n	8000bd2 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000bac:	4b31      	ldr	r3, [pc, #196]	; (8000c74 <HAL_FLASHEx_Erase+0x13c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d009      	beq.n	8000bcc <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000bb8:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <HAL_FLASHEx_Erase+0x13c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a2d      	ldr	r2, [pc, #180]	; (8000c74 <HAL_FLASHEx_Erase+0x13c>)
 8000bbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bc2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <HAL_FLASHEx_Erase+0x138>)
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	771a      	strb	r2, [r3, #28]
 8000bca:	e002      	b.n	8000bd2 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000bcc:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <HAL_FLASHEx_Erase+0x138>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d111      	bne.n	8000bfe <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f84a 	bl	8000c78 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000be4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000be8:	f7ff fef6 	bl	80009d8 <FLASH_WaitForLastOperation>
 8000bec:	4603      	mov	r3, r0
 8000bee:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8000bf0:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <HAL_FLASHEx_Erase+0x13c>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <HAL_FLASHEx_Erase+0x13c>)
 8000bf6:	f023 0304 	bic.w	r3, r3, #4
 8000bfa:	6153      	str	r3, [r2, #20]
 8000bfc:	e02d      	b.n	8000c5a <HAL_FLASHEx_Erase+0x122>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	e01d      	b.n	8000c4a <HAL_FLASHEx_Erase+0x112>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	4619      	mov	r1, r3
 8000c14:	68b8      	ldr	r0, [r7, #8]
 8000c16:	f000 f84d 	bl	8000cb4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c1a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c1e:	f7ff fedb 	bl	80009d8 <FLASH_WaitForLastOperation>
 8000c22:	4603      	mov	r3, r0
 8000c24:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_FLASHEx_Erase+0x13c>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <HAL_FLASHEx_Erase+0x13c>)
 8000c2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000c30:	f023 0302 	bic.w	r3, r3, #2
 8000c34:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d003      	beq.n	8000c44 <HAL_FLASHEx_Erase+0x10c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	601a      	str	r2, [r3, #0]
          break;
 8000c42:	e00a      	b.n	8000c5a <HAL_FLASHEx_Erase+0x122>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	3301      	adds	r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	68ba      	ldr	r2, [r7, #8]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d3d9      	bcc.n	8000c0e <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8000c5a:	f000 f84f 	bl	8000cfc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <HAL_FLASHEx_Erase+0x138>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]

  return status;
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000001c 	.word	0x2000001c
 8000c74:	40022000 	.word	0x40022000

08000c78 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d005      	beq.n	8000c96 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <FLASH_MassErase+0x38>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <FLASH_MassErase+0x38>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <FLASH_MassErase+0x38>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <FLASH_MassErase+0x38>)
 8000c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca0:	6153      	str	r3, [r2, #20]
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40022000 	.word	0x40022000

08000cb4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <FLASH_PageErase+0x44>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8000cce:	490a      	ldr	r1, [pc, #40]	; (8000cf8 <FLASH_PageErase+0x44>)
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <FLASH_PageErase+0x44>)
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <FLASH_PageErase+0x44>)
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <FLASH_PageErase+0x44>)
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <FLASH_PageErase+0x44>)
 8000ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cea:	6153      	str	r3, [r2, #20]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	40022000 	.word	0x40022000

08000cfc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8000d02:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <FLASH_FlushCaches+0x80>)
 8000d04:	7f1b      	ldrb	r3, [r3, #28]
 8000d06:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d002      	beq.n	8000d14 <FLASH_FlushCaches+0x18>
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	d111      	bne.n	8000d38 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000d14:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <FLASH_FlushCaches+0x84>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a19      	ldr	r2, [pc, #100]	; (8000d80 <FLASH_FlushCaches+0x84>)
 8000d1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <FLASH_FlushCaches+0x84>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a16      	ldr	r2, [pc, #88]	; (8000d80 <FLASH_FlushCaches+0x84>)
 8000d26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d2a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <FLASH_FlushCaches+0x84>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <FLASH_FlushCaches+0x84>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d36:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d002      	beq.n	8000d44 <FLASH_FlushCaches+0x48>
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d111      	bne.n	8000d68 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <FLASH_FlushCaches+0x84>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <FLASH_FlushCaches+0x84>)
 8000d4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <FLASH_FlushCaches+0x84>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <FLASH_FlushCaches+0x84>)
 8000d56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d5a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <FLASH_FlushCaches+0x84>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <FLASH_FlushCaches+0x84>)
 8000d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d66:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <FLASH_FlushCaches+0x80>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	771a      	strb	r2, [r3, #28]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	2000001c 	.word	0x2000001c
 8000d80:	40022000 	.word	0x40022000

08000d84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <HAL_PWREx_GetVoltageRange+0x18>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40007000 	.word	0x40007000

08000da0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dae:	d130      	bne.n	8000e12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000db0:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dbc:	d038      	beq.n	8000e30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dc6:	4a1e      	ldr	r2, [pc, #120]	; (8000e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dcc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2232      	movs	r2, #50	; 0x32
 8000dd4:	fb02 f303 	mul.w	r3, r2, r3
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dda:	fba2 2303 	umull	r2, r3, r2, r3
 8000dde:	0c9b      	lsrs	r3, r3, #18
 8000de0:	3301      	adds	r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000de4:	e002      	b.n	8000dec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000df8:	d102      	bne.n	8000e00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1f2      	bne.n	8000de6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e0c:	d110      	bne.n	8000e30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e00f      	b.n	8000e32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e1e:	d007      	beq.n	8000e30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e28:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40007000 	.word	0x40007000
 8000e44:	20000010 	.word	0x20000010
 8000e48:	431bde83 	.word	0x431bde83

08000e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d102      	bne.n	8000e60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f000 bc11 	b.w	8001682 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e60:	4ba0      	ldr	r3, [pc, #640]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 030c 	and.w	r3, r3, #12
 8000e68:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e6a:	4b9e      	ldr	r3, [pc, #632]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0310 	and.w	r3, r3, #16
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 80e4 	beq.w	800104a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d007      	beq.n	8000e98 <HAL_RCC_OscConfig+0x4c>
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	2b0c      	cmp	r3, #12
 8000e8c:	f040 808b 	bne.w	8000fa6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	f040 8087 	bne.w	8000fa6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e98:	4b92      	ldr	r3, [pc, #584]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d005      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x64>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e3e8      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a1a      	ldr	r2, [r3, #32]
 8000eb4:	4b8b      	ldr	r3, [pc, #556]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0308 	and.w	r3, r3, #8
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d004      	beq.n	8000eca <HAL_RCC_OscConfig+0x7e>
 8000ec0:	4b88      	ldr	r3, [pc, #544]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ec8:	e005      	b.n	8000ed6 <HAL_RCC_OscConfig+0x8a>
 8000eca:	4b86      	ldr	r3, [pc, #536]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d223      	bcs.n	8000f22 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fd40 	bl	8001964 <RCC_SetFlashLatencyFromMSIRange>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e3c9      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eee:	4b7d      	ldr	r3, [pc, #500]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a7c      	ldr	r2, [pc, #496]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4b7a      	ldr	r3, [pc, #488]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	4977      	ldr	r1, [pc, #476]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f0c:	4b75      	ldr	r3, [pc, #468]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69db      	ldr	r3, [r3, #28]
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	4972      	ldr	r1, [pc, #456]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	604b      	str	r3, [r1, #4]
 8000f20:	e025      	b.n	8000f6e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f22:	4b70      	ldr	r3, [pc, #448]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a6f      	ldr	r2, [pc, #444]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	4b6d      	ldr	r3, [pc, #436]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	496a      	ldr	r1, [pc, #424]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f40:	4b68      	ldr	r3, [pc, #416]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	4965      	ldr	r1, [pc, #404]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000f50:	4313      	orrs	r3, r2
 8000f52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d109      	bne.n	8000f6e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fd00 	bl	8001964 <RCC_SetFlashLatencyFromMSIRange>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e389      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f6e:	f000 fc6f 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 8000f72:	4601      	mov	r1, r0
 8000f74:	4b5b      	ldr	r3, [pc, #364]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	091b      	lsrs	r3, r3, #4
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	4a5a      	ldr	r2, [pc, #360]	; (80010e8 <HAL_RCC_OscConfig+0x29c>)
 8000f80:	5cd3      	ldrb	r3, [r2, r3]
 8000f82:	f003 031f 	and.w	r3, r3, #31
 8000f86:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8a:	4a58      	ldr	r2, [pc, #352]	; (80010ec <HAL_RCC_OscConfig+0x2a0>)
 8000f8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f8e:	4b58      	ldr	r3, [pc, #352]	; (80010f0 <HAL_RCC_OscConfig+0x2a4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fb34 	bl	8000600 <HAL_InitTick>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d052      	beq.n	8001048 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	e36d      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d032      	beq.n	8001014 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fae:	4b4d      	ldr	r3, [pc, #308]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a4c      	ldr	r2, [pc, #304]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fba:	f7ff fb71 	bl	80006a0 <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fc2:	f7ff fb6d 	bl	80006a0 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e356      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fd4:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0f0      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe0:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a3f      	ldr	r2, [pc, #252]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	493a      	ldr	r1, [pc, #232]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ffe:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	4935      	ldr	r1, [pc, #212]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 800100e:	4313      	orrs	r3, r2
 8001010:	604b      	str	r3, [r1, #4]
 8001012:	e01a      	b.n	800104a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001014:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a32      	ldr	r2, [pc, #200]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 800101a:	f023 0301 	bic.w	r3, r3, #1
 800101e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001020:	f7ff fb3e 	bl	80006a0 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001028:	f7ff fb3a 	bl	80006a0 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e323      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f0      	bne.n	8001028 <HAL_RCC_OscConfig+0x1dc>
 8001046:	e000      	b.n	800104a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001048:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d073      	beq.n	800113e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	2b08      	cmp	r3, #8
 800105a:	d005      	beq.n	8001068 <HAL_RCC_OscConfig+0x21c>
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	2b0c      	cmp	r3, #12
 8001060:	d10e      	bne.n	8001080 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2b03      	cmp	r3, #3
 8001066:	d10b      	bne.n	8001080 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d063      	beq.n	800113c <HAL_RCC_OscConfig+0x2f0>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d15f      	bne.n	800113c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e300      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001088:	d106      	bne.n	8001098 <HAL_RCC_OscConfig+0x24c>
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 8001090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	e01d      	b.n	80010d4 <HAL_RCC_OscConfig+0x288>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010a0:	d10c      	bne.n	80010bc <HAL_RCC_OscConfig+0x270>
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 80010a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 80010b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	e00b      	b.n	80010d4 <HAL_RCC_OscConfig+0x288>
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 80010c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <HAL_RCC_OscConfig+0x298>)
 80010ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d01b      	beq.n	8001114 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fae0 	bl	80006a0 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010e2:	e010      	b.n	8001106 <HAL_RCC_OscConfig+0x2ba>
 80010e4:	40021000 	.word	0x40021000
 80010e8:	08001a94 	.word	0x08001a94
 80010ec:	20000010 	.word	0x20000010
 80010f0:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f4:	f7ff fad4 	bl	80006a0 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	; 0x64
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e2bd      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001106:	4baf      	ldr	r3, [pc, #700]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0x2a8>
 8001112:	e014      	b.n	800113e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001114:	f7ff fac4 	bl	80006a0 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fac0 	bl	80006a0 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b64      	cmp	r3, #100	; 0x64
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e2a9      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800112e:	4ba5      	ldr	r3, [pc, #660]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x2d0>
 800113a:	e000      	b.n	800113e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d060      	beq.n	800120c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	2b04      	cmp	r3, #4
 800114e:	d005      	beq.n	800115c <HAL_RCC_OscConfig+0x310>
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2b0c      	cmp	r3, #12
 8001154:	d119      	bne.n	800118a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d116      	bne.n	800118a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800115c:	4b99      	ldr	r3, [pc, #612]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001164:	2b00      	cmp	r3, #0
 8001166:	d005      	beq.n	8001174 <HAL_RCC_OscConfig+0x328>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e286      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001174:	4b93      	ldr	r3, [pc, #588]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	061b      	lsls	r3, r3, #24
 8001182:	4990      	ldr	r1, [pc, #576]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001188:	e040      	b.n	800120c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d023      	beq.n	80011da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001192:	4b8c      	ldr	r3, [pc, #560]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a8b      	ldr	r2, [pc, #556]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119e:	f7ff fa7f 	bl	80006a0 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a6:	f7ff fa7b 	bl	80006a0 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e264      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011b8:	4b82      	ldr	r3, [pc, #520]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c4:	4b7f      	ldr	r3, [pc, #508]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	061b      	lsls	r3, r3, #24
 80011d2:	497c      	ldr	r1, [pc, #496]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
 80011d8:	e018      	b.n	800120c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011da:	4b7a      	ldr	r3, [pc, #488]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a79      	ldr	r2, [pc, #484]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 80011e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e6:	f7ff fa5b 	bl	80006a0 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fa57 	bl	80006a0 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e240      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001200:	4b70      	ldr	r3, [pc, #448]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f0      	bne.n	80011ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	2b00      	cmp	r3, #0
 8001216:	d03c      	beq.n	8001292 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d01c      	beq.n	800125a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001220:	4b68      	ldr	r3, [pc, #416]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001226:	4a67      	ldr	r2, [pc, #412]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001230:	f7ff fa36 	bl	80006a0 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fa32 	bl	80006a0 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e21b      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800124a:	4b5e      	ldr	r3, [pc, #376]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 800124c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0ef      	beq.n	8001238 <HAL_RCC_OscConfig+0x3ec>
 8001258:	e01b      	b.n	8001292 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800125a:	4b5a      	ldr	r3, [pc, #360]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 800125c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001260:	4a58      	ldr	r2, [pc, #352]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001262:	f023 0301 	bic.w	r3, r3, #1
 8001266:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126a:	f7ff fa19 	bl	80006a0 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001272:	f7ff fa15 	bl	80006a0 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e1fe      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001284:	4b4f      	ldr	r3, [pc, #316]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1ef      	bne.n	8001272 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 80a6 	beq.w	80013ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012a4:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 80012a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10d      	bne.n	80012cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b0:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 80012b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b4:	4a43      	ldr	r2, [pc, #268]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 80012b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ba:	6593      	str	r3, [r2, #88]	; 0x58
 80012bc:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 80012be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012c8:	2301      	movs	r3, #1
 80012ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012cc:	4b3e      	ldr	r3, [pc, #248]	; (80013c8 <HAL_RCC_OscConfig+0x57c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d118      	bne.n	800130a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012d8:	4b3b      	ldr	r3, [pc, #236]	; (80013c8 <HAL_RCC_OscConfig+0x57c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a3a      	ldr	r2, [pc, #232]	; (80013c8 <HAL_RCC_OscConfig+0x57c>)
 80012de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e4:	f7ff f9dc 	bl	80006a0 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ec:	f7ff f9d8 	bl	80006a0 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e1c1      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012fe:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <HAL_RCC_OscConfig+0x57c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d108      	bne.n	8001324 <HAL_RCC_OscConfig+0x4d8>
 8001312:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001318:	4a2a      	ldr	r2, [pc, #168]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001322:	e024      	b.n	800136e <HAL_RCC_OscConfig+0x522>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b05      	cmp	r3, #5
 800132a:	d110      	bne.n	800134e <HAL_RCC_OscConfig+0x502>
 800132c:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 800132e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001332:	4a24      	ldr	r2, [pc, #144]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 800133e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001342:	4a20      	ldr	r2, [pc, #128]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800134c:	e00f      	b.n	800136e <HAL_RCC_OscConfig+0x522>
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001356:	f023 0301 	bic.w	r3, r3, #1
 800135a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800135e:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001364:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001366:	f023 0304 	bic.w	r3, r3, #4
 800136a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d016      	beq.n	80013a4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001376:	f7ff f993 	bl	80006a0 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800137c:	e00a      	b.n	8001394 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137e:	f7ff f98f 	bl	80006a0 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	f241 3288 	movw	r2, #5000	; 0x1388
 800138c:	4293      	cmp	r3, r2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e176      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_RCC_OscConfig+0x578>)
 8001396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0ed      	beq.n	800137e <HAL_RCC_OscConfig+0x532>
 80013a2:	e01a      	b.n	80013da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a4:	f7ff f97c 	bl	80006a0 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013aa:	e00f      	b.n	80013cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ac:	f7ff f978 	bl	80006a0 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d906      	bls.n	80013cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e15f      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013cc:	4baa      	ldr	r3, [pc, #680]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 80013ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1e8      	bne.n	80013ac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013da:	7ffb      	ldrb	r3, [r7, #31]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d105      	bne.n	80013ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e0:	4ba5      	ldr	r3, [pc, #660]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 80013e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e4:	4aa4      	ldr	r2, [pc, #656]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 80013e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0320 	and.w	r3, r3, #32
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d03c      	beq.n	8001472 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d01c      	beq.n	800143a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001400:	4b9d      	ldr	r3, [pc, #628]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001402:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001406:	4a9c      	ldr	r2, [pc, #624]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001410:	f7ff f946 	bl	80006a0 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001418:	f7ff f942 	bl	80006a0 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e12b      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800142a:	4b93      	ldr	r3, [pc, #588]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 800142c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0ef      	beq.n	8001418 <HAL_RCC_OscConfig+0x5cc>
 8001438:	e01b      	b.n	8001472 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800143a:	4b8f      	ldr	r3, [pc, #572]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 800143c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001440:	4a8d      	ldr	r2, [pc, #564]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001442:	f023 0301 	bic.w	r3, r3, #1
 8001446:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144a:	f7ff f929 	bl	80006a0 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001452:	f7ff f925 	bl	80006a0 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e10e      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001464:	4b84      	ldr	r3, [pc, #528]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001466:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1ef      	bne.n	8001452 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 8102 	beq.w	8001680 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	2b02      	cmp	r3, #2
 8001482:	f040 80c5 	bne.w	8001610 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001486:	4b7c      	ldr	r3, [pc, #496]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f003 0203 	and.w	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001496:	429a      	cmp	r2, r3
 8001498:	d12c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	3b01      	subs	r3, #1
 80014a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d123      	bne.n	80014f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d11b      	bne.n	80014f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d113      	bne.n	80014f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d6:	085b      	lsrs	r3, r3, #1
 80014d8:	3b01      	subs	r3, #1
 80014da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014dc:	429a      	cmp	r2, r3
 80014de:	d109      	bne.n	80014f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	3b01      	subs	r3, #1
 80014ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d067      	beq.n	80015c4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	d062      	beq.n	80015c0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014fa:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e0bb      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800150a:	4b5b      	ldr	r3, [pc, #364]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a5a      	ldr	r2, [pc, #360]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001510:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001514:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001516:	f7ff f8c3 	bl	80006a0 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff f8bf 	bl	80006a0 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e0a8      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001530:	4b51      	ldr	r3, [pc, #324]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800153c:	4b4e      	ldr	r3, [pc, #312]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	4b4e      	ldr	r3, [pc, #312]	; (800167c <HAL_RCC_OscConfig+0x830>)
 8001542:	4013      	ands	r3, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800154c:	3a01      	subs	r2, #1
 800154e:	0112      	lsls	r2, r2, #4
 8001550:	4311      	orrs	r1, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001556:	0212      	lsls	r2, r2, #8
 8001558:	4311      	orrs	r1, r2
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800155e:	0852      	lsrs	r2, r2, #1
 8001560:	3a01      	subs	r2, #1
 8001562:	0552      	lsls	r2, r2, #21
 8001564:	4311      	orrs	r1, r2
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800156a:	0852      	lsrs	r2, r2, #1
 800156c:	3a01      	subs	r2, #1
 800156e:	0652      	lsls	r2, r2, #25
 8001570:	4311      	orrs	r1, r2
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001576:	06d2      	lsls	r2, r2, #27
 8001578:	430a      	orrs	r2, r1
 800157a:	493f      	ldr	r1, [pc, #252]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 800157c:	4313      	orrs	r3, r2
 800157e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001580:	4b3d      	ldr	r3, [pc, #244]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a3c      	ldr	r2, [pc, #240]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800158a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800158c:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4a39      	ldr	r2, [pc, #228]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001596:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001598:	f7ff f882 	bl	80006a0 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff f87e 	bl	80006a0 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e067      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015be:	e05f      	b.n	8001680 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e05e      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015c4:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d157      	bne.n	8001680 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80015d0:	4b29      	ldr	r3, [pc, #164]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a28      	ldr	r2, [pc, #160]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 80015d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015dc:	4b26      	ldr	r3, [pc, #152]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	4a25      	ldr	r2, [pc, #148]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 80015e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015e8:	f7ff f85a 	bl	80006a0 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff f856 	bl	80006a0 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e03f      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x7a4>
 800160e:	e037      	b.n	8001680 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2b0c      	cmp	r3, #12
 8001614:	d02d      	beq.n	8001672 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a17      	ldr	r2, [pc, #92]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 800161c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001620:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d105      	bne.n	800163a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	4a11      	ldr	r2, [pc, #68]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001634:	f023 0303 	bic.w	r3, r3, #3
 8001638:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001640:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001648:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164a:	f7ff f829 	bl	80006a0 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff f825 	bl	80006a0 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e00e      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <HAL_RCC_OscConfig+0x82c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f0      	bne.n	8001652 <HAL_RCC_OscConfig+0x806>
 8001670:	e006      	b.n	8001680 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e005      	b.n	8001682 <HAL_RCC_OscConfig+0x836>
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3720      	adds	r7, #32
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop

0800168c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0c8      	b.n	8001832 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016a0:	4b66      	ldr	r3, [pc, #408]	; (800183c <HAL_RCC_ClockConfig+0x1b0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d910      	bls.n	80016d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ae:	4b63      	ldr	r3, [pc, #396]	; (800183c <HAL_RCC_ClockConfig+0x1b0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 0207 	bic.w	r2, r3, #7
 80016b6:	4961      	ldr	r1, [pc, #388]	; (800183c <HAL_RCC_ClockConfig+0x1b0>)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016be:	4b5f      	ldr	r3, [pc, #380]	; (800183c <HAL_RCC_ClockConfig+0x1b0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0b0      	b.n	8001832 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d04c      	beq.n	8001776 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d107      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016e4:	4b56      	ldr	r3, [pc, #344]	; (8001840 <HAL_RCC_ClockConfig+0x1b4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d121      	bne.n	8001734 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e09e      	b.n	8001832 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d107      	bne.n	800170c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016fc:	4b50      	ldr	r3, [pc, #320]	; (8001840 <HAL_RCC_ClockConfig+0x1b4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d115      	bne.n	8001734 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e092      	b.n	8001832 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d107      	bne.n	8001724 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001714:	4b4a      	ldr	r3, [pc, #296]	; (8001840 <HAL_RCC_ClockConfig+0x1b4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d109      	bne.n	8001734 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e086      	b.n	8001832 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001724:	4b46      	ldr	r3, [pc, #280]	; (8001840 <HAL_RCC_ClockConfig+0x1b4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e07e      	b.n	8001832 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001734:	4b42      	ldr	r3, [pc, #264]	; (8001840 <HAL_RCC_ClockConfig+0x1b4>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f023 0203 	bic.w	r2, r3, #3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	493f      	ldr	r1, [pc, #252]	; (8001840 <HAL_RCC_ClockConfig+0x1b4>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001746:	f7fe ffab 	bl	80006a0 <HAL_GetTick>
 800174a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174c:	e00a      	b.n	8001764 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174e:	f7fe ffa7 	bl	80006a0 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f241 3288 	movw	r2, #5000	; 0x1388
 800175c:	4293      	cmp	r3, r2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e066      	b.n	8001832 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001764:	4b36      	ldr	r3, [pc, #216]	; (8001840 <HAL_RCC_ClockConfig+0x1b4>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 020c 	and.w	r2, r3, #12
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	429a      	cmp	r2, r3
 8001774:	d1eb      	bne.n	800174e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d008      	beq.n	8001794 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001782:	4b2f      	ldr	r3, [pc, #188]	; (8001840 <HAL_RCC_ClockConfig+0x1b4>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	492c      	ldr	r1, [pc, #176]	; (8001840 <HAL_RCC_ClockConfig+0x1b4>)
 8001790:	4313      	orrs	r3, r2
 8001792:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001794:	4b29      	ldr	r3, [pc, #164]	; (800183c <HAL_RCC_ClockConfig+0x1b0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d210      	bcs.n	80017c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_RCC_ClockConfig+0x1b0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 0207 	bic.w	r2, r3, #7
 80017aa:	4924      	ldr	r1, [pc, #144]	; (800183c <HAL_RCC_ClockConfig+0x1b0>)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b22      	ldr	r3, [pc, #136]	; (800183c <HAL_RCC_ClockConfig+0x1b0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e036      	b.n	8001832 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_RCC_ClockConfig+0x1b4>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4918      	ldr	r1, [pc, #96]	; (8001840 <HAL_RCC_ClockConfig+0x1b4>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_RCC_ClockConfig+0x1b4>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4910      	ldr	r1, [pc, #64]	; (8001840 <HAL_RCC_ClockConfig+0x1b4>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001802:	f000 f825 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 8001806:	4601      	mov	r1, r0
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_RCC_ClockConfig+0x1b4>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	4a0c      	ldr	r2, [pc, #48]	; (8001844 <HAL_RCC_ClockConfig+0x1b8>)
 8001814:	5cd3      	ldrb	r3, [r2, r3]
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	fa21 f303 	lsr.w	r3, r1, r3
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe feea 	bl	8000600 <HAL_InitTick>
 800182c:	4603      	mov	r3, r0
 800182e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001830:	7afb      	ldrb	r3, [r7, #11]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40022000 	.word	0x40022000
 8001840:	40021000 	.word	0x40021000
 8001844:	08001a94 	.word	0x08001a94
 8001848:	20000010 	.word	0x20000010
 800184c:	20000014 	.word	0x20000014

08001850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185e:	4b3d      	ldr	r3, [pc, #244]	; (8001954 <HAL_RCC_GetSysClockFreq+0x104>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001868:	4b3a      	ldr	r3, [pc, #232]	; (8001954 <HAL_RCC_GetSysClockFreq+0x104>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x34>
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d121      	bne.n	80018c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d11e      	bne.n	80018c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001884:	4b33      	ldr	r3, [pc, #204]	; (8001954 <HAL_RCC_GetSysClockFreq+0x104>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001890:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_RCC_GetSysClockFreq+0x104>)
 8001892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001896:	0a1b      	lsrs	r3, r3, #8
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	e005      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018a0:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <HAL_RCC_GetSysClockFreq+0x104>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018ac:	4a2a      	ldr	r2, [pc, #168]	; (8001958 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10d      	bne.n	80018d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018c0:	e00a      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d102      	bne.n	80018ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_RCC_GetSysClockFreq+0x10c>)
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	e004      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <HAL_RCC_GetSysClockFreq+0x110>)
 80018d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	d133      	bne.n	8001946 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_RCC_GetSysClockFreq+0x104>)
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d002      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0xa4>
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d003      	beq.n	80018fa <HAL_RCC_GetSysClockFreq+0xaa>
 80018f2:	e005      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_RCC_GetSysClockFreq+0x10c>)
 80018f6:	617b      	str	r3, [r7, #20]
      break;
 80018f8:	e005      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_RCC_GetSysClockFreq+0x110>)
 80018fc:	617b      	str	r3, [r7, #20]
      break;
 80018fe:	e002      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	617b      	str	r3, [r7, #20]
      break;
 8001904:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <HAL_RCC_GetSysClockFreq+0x104>)
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	3301      	adds	r3, #1
 8001912:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_RCC_GetSysClockFreq+0x104>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	fb02 f203 	mul.w	r2, r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_GetSysClockFreq+0x104>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0e5b      	lsrs	r3, r3, #25
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	3301      	adds	r3, #1
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	fbb2 f3f3 	udiv	r3, r2, r3
 8001944:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001946:	69bb      	ldr	r3, [r7, #24]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3724      	adds	r7, #36	; 0x24
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	40021000 	.word	0x40021000
 8001958:	08001aa4 	.word	0x08001aa4
 800195c:	00f42400 	.word	0x00f42400
 8001960:	007a1200 	.word	0x007a1200

08001964 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800197c:	f7ff fa02 	bl	8000d84 <HAL_PWREx_GetVoltageRange>
 8001980:	6178      	str	r0, [r7, #20]
 8001982:	e014      	b.n	80019ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	4a24      	ldr	r2, [pc, #144]	; (8001a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800198a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198e:	6593      	str	r3, [r2, #88]	; 0x58
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800199c:	f7ff f9f2 	bl	8000d84 <HAL_PWREx_GetVoltageRange>
 80019a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b4:	d10b      	bne.n	80019ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b80      	cmp	r3, #128	; 0x80
 80019ba:	d919      	bls.n	80019f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2ba0      	cmp	r3, #160	; 0xa0
 80019c0:	d902      	bls.n	80019c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019c2:	2302      	movs	r3, #2
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	e013      	b.n	80019f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019c8:	2301      	movs	r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	e010      	b.n	80019f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b80      	cmp	r3, #128	; 0x80
 80019d2:	d902      	bls.n	80019da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019d4:	2303      	movs	r3, #3
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	e00a      	b.n	80019f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b80      	cmp	r3, #128	; 0x80
 80019de:	d102      	bne.n	80019e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019e0:	2302      	movs	r3, #2
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	e004      	b.n	80019f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b70      	cmp	r3, #112	; 0x70
 80019ea:	d101      	bne.n	80019f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019ec:	2301      	movs	r3, #1
 80019ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 0207 	bic.w	r2, r3, #7
 80019f8:	4909      	ldr	r1, [pc, #36]	; (8001a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d001      	beq.n	8001a12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40022000 	.word	0x40022000

08001a24 <__libc_init_array>:
 8001a24:	b570      	push	{r4, r5, r6, lr}
 8001a26:	4e0d      	ldr	r6, [pc, #52]	; (8001a5c <__libc_init_array+0x38>)
 8001a28:	4c0d      	ldr	r4, [pc, #52]	; (8001a60 <__libc_init_array+0x3c>)
 8001a2a:	1ba4      	subs	r4, r4, r6
 8001a2c:	10a4      	asrs	r4, r4, #2
 8001a2e:	2500      	movs	r5, #0
 8001a30:	42a5      	cmp	r5, r4
 8001a32:	d109      	bne.n	8001a48 <__libc_init_array+0x24>
 8001a34:	4e0b      	ldr	r6, [pc, #44]	; (8001a64 <__libc_init_array+0x40>)
 8001a36:	4c0c      	ldr	r4, [pc, #48]	; (8001a68 <__libc_init_array+0x44>)
 8001a38:	f000 f820 	bl	8001a7c <_init>
 8001a3c:	1ba4      	subs	r4, r4, r6
 8001a3e:	10a4      	asrs	r4, r4, #2
 8001a40:	2500      	movs	r5, #0
 8001a42:	42a5      	cmp	r5, r4
 8001a44:	d105      	bne.n	8001a52 <__libc_init_array+0x2e>
 8001a46:	bd70      	pop	{r4, r5, r6, pc}
 8001a48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a4c:	4798      	blx	r3
 8001a4e:	3501      	adds	r5, #1
 8001a50:	e7ee      	b.n	8001a30 <__libc_init_array+0xc>
 8001a52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a56:	4798      	blx	r3
 8001a58:	3501      	adds	r5, #1
 8001a5a:	e7f2      	b.n	8001a42 <__libc_init_array+0x1e>
 8001a5c:	08001ad4 	.word	0x08001ad4
 8001a60:	08001ad4 	.word	0x08001ad4
 8001a64:	08001ad4 	.word	0x08001ad4
 8001a68:	08001ad8 	.word	0x08001ad8

08001a6c <memset>:
 8001a6c:	4402      	add	r2, r0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d100      	bne.n	8001a76 <memset+0xa>
 8001a74:	4770      	bx	lr
 8001a76:	f803 1b01 	strb.w	r1, [r3], #1
 8001a7a:	e7f9      	b.n	8001a70 <memset+0x4>

08001a7c <_init>:
 8001a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7e:	bf00      	nop
 8001a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a82:	bc08      	pop	{r3}
 8001a84:	469e      	mov	lr, r3
 8001a86:	4770      	bx	lr

08001a88 <_fini>:
 8001a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8a:	bf00      	nop
 8001a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a8e:	bc08      	pop	{r3}
 8001a90:	469e      	mov	lr, r3
 8001a92:	4770      	bx	lr
